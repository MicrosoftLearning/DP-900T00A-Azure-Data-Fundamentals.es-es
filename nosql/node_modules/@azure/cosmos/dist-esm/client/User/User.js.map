{"version":3,"file":"User.js","sourceRoot":"","sources":["../../../src/client/User/User.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../../ClientContext\";\nimport {\n  createUserUri,\n  getIdFromLink,\n  getPathFromLink,\n  isResourceValid,\n  ResourceType\n} from \"../../common\";\nimport { RequestOptions } from \"../../request\";\nimport { Database } from \"../Database\";\nimport { Permission, Permissions } from \"../Permission\";\nimport { UserDefinition } from \"./UserDefinition\";\nimport { UserResponse } from \"./UserResponse\";\n\n/**\n * Used to read, replace, and delete Users.\n *\n * Additionally, you can access the permissions for a given user via `user.permission` and `user.permissions`.\n *\n * @see {@link Users} to create, upsert, query, or read all.\n */\nexport class User {\n  /**\n   * Operations for creating, upserting, querying, or reading all operations.\n   *\n   * See `client.permission(id)` to read, replace, or delete a specific Permission by id.\n   */\n  public readonly permissions: Permissions;\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  public get url(): string {\n    return createUserUri(this.database.id, this.id);\n  }\n  /**\n   * @hidden\n   * @param database - The parent {@link Database}.\n   */\n  constructor(\n    public readonly database: Database,\n    public readonly id: string,\n    private readonly clientContext: ClientContext\n  ) {\n    this.permissions = new Permissions(this, this.clientContext);\n  }\n\n  /**\n   * Operations to read, replace, or delete a specific Permission by id.\n   *\n   * See `client.permissions` for creating, upserting, querying, or reading all operations.\n   */\n  public permission(id: string): Permission {\n    return new Permission(this, id, this.clientContext);\n  }\n\n  /**\n   * Read the {@link UserDefinition} for the given {@link User}.\n   */\n  public async read(options?: RequestOptions): Promise<UserResponse> {\n    const path = getPathFromLink(this.url);\n    const id = getIdFromLink(this.url);\n    const response = await this.clientContext.read<UserDefinition>({\n      path,\n      resourceType: ResourceType.user,\n      resourceId: id,\n      options\n    });\n    return new UserResponse(response.result, response.headers, response.code, this);\n  }\n\n  /**\n   * Replace the given {@link User}'s definition with the specified {@link UserDefinition}.\n   * @param body - The specified {@link UserDefinition} to replace the definition.\n   */\n  public async replace(body: UserDefinition, options?: RequestOptions): Promise<UserResponse> {\n    const err = {};\n    if (!isResourceValid(body, err)) {\n      throw err;\n    }\n\n    const path = getPathFromLink(this.url);\n    const id = getIdFromLink(this.url);\n\n    const response = await this.clientContext.replace<UserDefinition>({\n      body,\n      path,\n      resourceType: ResourceType.user,\n      resourceId: id,\n      options\n    });\n    return new UserResponse(response.result, response.headers, response.code, this);\n  }\n\n  /**\n   * Delete the given {@link User}.\n   */\n  public async delete(options?: RequestOptions): Promise<UserResponse> {\n    const path = getPathFromLink(this.url);\n    const id = getIdFromLink(this.url);\n\n    const response = await this.clientContext.delete<UserDefinition>({\n      path,\n      resourceType: ResourceType.user,\n      resourceId: id,\n      options\n    });\n    return new UserResponse(response.result, response.headers, response.code, this);\n  }\n}\n"]}