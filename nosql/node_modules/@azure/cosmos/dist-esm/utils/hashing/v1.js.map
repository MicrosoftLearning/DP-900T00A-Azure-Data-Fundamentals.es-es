{"version":3,"file":"v1.js","sourceRoot":"","sources":["../../../src/utils/hashing/v1.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { doubleToByteArrayJSBI, writeNumberForBinaryEncodingJSBI } from \"./encoding/number\";\nimport { writeStringForBinaryEncoding } from \"./encoding/string\";\nimport { BytePrefix } from \"./encoding/prefix\";\nimport MurmurHash from \"./murmurHash\";\n\nconst MAX_STRING_CHARS = 100;\n\ntype v1Key = string | number | boolean | null | Record<string, unknown> | undefined;\n\nexport function hashV1PartitionKey(partitionKey: v1Key): string {\n  const toHash = prefixKeyByType(partitionKey);\n  const hash = MurmurHash.x86.hash32(toHash);\n  const encodedJSBI = writeNumberForBinaryEncodingJSBI(hash);\n  const encodedValue = encodeByType(partitionKey);\n  return Buffer.concat([encodedJSBI, encodedValue])\n    .toString(\"hex\")\n    .toUpperCase();\n}\n\nfunction prefixKeyByType(key: v1Key): Buffer {\n  let bytes: Buffer;\n  switch (typeof key) {\n    case \"string\": {\n      const truncated = key.substr(0, MAX_STRING_CHARS);\n      bytes = Buffer.concat([\n        Buffer.from(BytePrefix.String, \"hex\"),\n        Buffer.from(truncated),\n        Buffer.from(BytePrefix.Undefined, \"hex\")\n      ]);\n      return bytes;\n    }\n    case \"number\": {\n      const numberBytes = doubleToByteArrayJSBI(key);\n      bytes = Buffer.concat([Buffer.from(BytePrefix.Number, \"hex\"), numberBytes]);\n      return bytes;\n    }\n    case \"boolean\": {\n      const prefix = key ? BytePrefix.True : BytePrefix.False;\n      return Buffer.from(prefix, \"hex\");\n    }\n    case \"object\": {\n      if (key === null) {\n        return Buffer.from(BytePrefix.Null, \"hex\");\n      }\n      return Buffer.from(BytePrefix.Undefined, \"hex\");\n    }\n    case \"undefined\": {\n      return Buffer.from(BytePrefix.Undefined, \"hex\");\n    }\n    default:\n      throw new Error(`Unexpected type: ${typeof key}`);\n  }\n}\n\nfunction encodeByType(key: v1Key): Buffer {\n  switch (typeof key) {\n    case \"string\": {\n      const truncated = key.substr(0, MAX_STRING_CHARS);\n      return writeStringForBinaryEncoding(truncated);\n    }\n    case \"number\": {\n      const encodedJSBI = writeNumberForBinaryEncodingJSBI(key);\n      return encodedJSBI;\n    }\n    case \"boolean\": {\n      const prefix = key ? BytePrefix.True : BytePrefix.False;\n      return Buffer.from(prefix, \"hex\");\n    }\n    case \"object\":\n      if (key === null) {\n        return Buffer.from(BytePrefix.Null, \"hex\");\n      }\n      return Buffer.from(BytePrefix.Undefined, \"hex\");\n    case \"undefined\":\n      return Buffer.from(BytePrefix.Undefined, \"hex\");\n    default:\n      throw new Error(`Unexpected type: ${typeof key}`);\n  }\n}\n"]}